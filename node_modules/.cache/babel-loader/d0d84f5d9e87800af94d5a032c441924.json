{"ast":null,"code":"import _objectSpread from \"/home/ahmed/lighthouse/scheduler/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/ahmed/lighthouse/scheduler/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nexport default function useApplicationData() {\n  //The default state of the application to be used\n  const _useState = useState({\n    day: 'Monday',\n    days: [],\n    appointments: {\n      '1': {\n        id: 1,\n        time: '12pm',\n        interview: null\n      }\n    },\n    interviewers: {}\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1]; //*********Functions that manipulate the data***************\n\n\n  const setDay = day => setState(_objectSpread({}, state, {\n    day\n  })); //Function to update the current spots on the Day list\n\n\n  function updateSpots() {\n    const parsedDay = state.days.find(day => day.name === state.day);\n    let spots = 0;\n\n    for (let appointment of parsedDay.appointments) {\n      if (!state['appointments'][\"\".concat(appointment)].interview) spots++;\n\n      const newDay = _objectSpread({}, parsedDay, {\n        spots\n      });\n\n      const newDays = state.days.map(day => day.name === state.day ? newDay : day);\n      setState(prev => _objectSpread({}, prev, {\n        days: newDays\n      }));\n    }\n  }\n\n  function bookInterview(id, interview) {\n    const appointment = _objectSpread({}, state.appointments[id], {\n      interview: _objectSpread({}, interview)\n    });\n\n    const appointments = _objectSpread({}, state.appointments, {\n      [id]: appointment\n    }); //Add the state to the API so that data persists\n\n\n    return axios.put(\"/api/appointments/\".concat(id), {\n      interview\n    }).then(response => {\n      setState(_objectSpread({}, state, {\n        appointments\n      }));\n      updateSpots();\n    });\n  } //Remove an appointment and delete it from the database\n\n\n  function cancelInterview(id) {\n    const appointment = _objectSpread({}, state.appointments[id], {\n      interview: null\n    });\n\n    const appointments = _objectSpread({}, state.appointments, {\n      [id]: appointment\n    });\n\n    return axios.delete(\"/api/appointments/\".concat(id), {}).then(() => {\n      setState(_objectSpread({}, state, {\n        appointments\n      }));\n    }).then(() => {\n      updateSpots();\n    });\n  } //Make API calls to display data from the database\n\n\n  useEffect(() => {\n    Promise.all([axios.get('/api/days'), axios.get('/api/appointments'), axios.get('/api/interviewers')]).then(all => {\n      setState(prev => _objectSpread({}, prev, {\n        days: all[0].data,\n        appointments: all[1].data,\n        interviewers: all[2].data\n      }));\n    });\n  }, []);\n  return {\n    state,\n    setDay,\n    bookInterview,\n    cancelInterview\n  };\n}","map":{"version":3,"sources":["/home/ahmed/lighthouse/scheduler/src/hooks/useApplicationData.js"],"names":["axios","useState","useEffect","useApplicationData","day","days","appointments","id","time","interview","interviewers","state","setState","setDay","updateSpots","parsedDay","find","name","spots","appointment","newDay","newDays","map","prev","bookInterview","put","then","response","cancelInterview","delete","Promise","all","get","data"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\n\nexport default function useApplicationData() {\n  //The default state of the application to be used\n  const [state, setState] = useState({\n    day: 'Monday',\n    days: [],\n    appointments: {\n      '1': {\n        id: 1,\n        time: '12pm',\n        interview: null\n      }\n    },\n    interviewers: {}\n  });\n\n  //*********Functions that manipulate the data***************\n  const setDay = day => setState({...state, day});\n\n  //Function to update the current spots on the Day list\n  function updateSpots() {\n    const parsedDay = state.days.find(day => day.name === state.day);\n    let spots = 0;\n\n    for (let appointment of parsedDay.appointments) {\n      if(!state['appointments'][`${appointment}`].interview)\n        spots++;  \n      \n    const newDay = {...parsedDay, spots}\n    const newDays = state.days.map(day => day.name === state.day ? newDay : day);\n\n    setState((prev) => ({\n      ...prev, \n      days: newDays, \n      }));\n    }\n  }\n\n  function bookInterview(id, interview) { \n\n    const appointment = {\n      ...state.appointments[id],\n      interview: { ...interview }\n    };\n\n    const appointments = {\n      ...state.appointments,\n      [id]: appointment\n    };\n\n    //Add the state to the API so that data persists\n    return axios.put(`/api/appointments/${id}`, {interview}).then(response => {\n      setState({...state, appointments});\n      updateSpots();\n    });\n  }\n\n  //Remove an appointment and delete it from the database\n  function cancelInterview(id) {\n\n    const appointment = {\n      ...state.appointments[id],\n      interview: null\n    };\n\n    const appointments = {\n      ...state.appointments,\n      [id]: appointment,\n    };\n\n    return axios.delete(`/api/appointments/${id}`, {})\n      .then(() => {\n        setState({...state, appointments});\n      })\n      .then(() => {\n        updateSpots();\n      });\n  }\n\n  //Make API calls to display data from the database\n  useEffect(() => {\n    Promise.all([\n      axios.get('/api/days'),\n      axios.get('/api/appointments'),\n      axios.get('/api/interviewers')\n    ])\n    .then(all => {\n      setState(prev => ({...prev, \n        days: all[0].data, \n        appointments: all[1].data, \n        interviewers: all[2].data\n      }));\n    })\n  }, []);\n\n  return { state, setDay, bookInterview, cancelInterview }\n}\n"]},"metadata":{},"sourceType":"module"}