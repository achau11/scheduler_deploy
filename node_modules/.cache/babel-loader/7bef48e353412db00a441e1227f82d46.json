{"ast":null,"code":"import _objectSpread from \"/home/ahmed/lighthouse/scheduler/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/ahmed/lighthouse/scheduler/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nexport default function useApplicationData() {\n  //The default state of the application to be used\n  const _useState = useState({\n    day: 'Monday',\n    days: [],\n    appointments: {\n      '1': {\n        id: 1,\n        time: '12pm',\n        interview: null\n      }\n    },\n    interviewers: {}\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1]; //*********Functions that manipulate the data***************\n\n\n  const setDay = day => setState(_objectSpread({}, state, {\n    day\n  })); //Function to update the current spots on the Day list\n\n\n  function updateSpots() {\n    const filteredDay = state.days.filter(day => {\n      return day.name === state.day;\n    });\n    const spots = 0;\n\n    if (filteredDay.length > 0) {\n      for (let appointment of filteredDay['0'].appointments) {\n        appointment = state['appointments'][\"\".concat(appointment)];\n      }\n    }\n  }\n\n  updateSpots();\n\n  function bookInterview(id, interview) {\n    const appointment = _objectSpread({}, state.appointments[id], {\n      interview: _objectSpread({}, interview)\n    });\n\n    const appointments = _objectSpread({}, state.appointments, {\n      [id]: appointment\n    }); //Add the state to the API so that data persists\n\n\n    return axios.put(\"/api/appointments/\".concat(id), {\n      interview\n    }).then(response => {\n      setState(_objectSpread({}, state, {\n        appointments\n      }));\n    });\n  } //Remove an appointment and delete it from the database\n\n\n  function cancelInterview(id) {\n    const appointment = _objectSpread({}, state.appointments[id], {\n      interview: null\n    });\n\n    const appointments = _objectSpread({}, state.appointments, {\n      [id]: appointment\n    });\n\n    return axios.delete(\"/api/appointments/\".concat(id), {}).then(() => {\n      setState(_objectSpread({}, state, {\n        appointments\n      }));\n    });\n  } //Make API calls to display data from the database\n\n\n  useEffect(() => {\n    Promise.all([axios.get('/api/days'), axios.get('/api/appointments'), axios.get('/api/interviewers')]).then(all => {\n      setState(prev => _objectSpread({}, prev, {\n        days: all[0].data,\n        appointments: all[1].data,\n        interviewers: all[2].data\n      }));\n    });\n  }, []);\n  return {\n    state,\n    setDay,\n    bookInterview,\n    cancelInterview\n  };\n}","map":{"version":3,"sources":["/home/ahmed/lighthouse/scheduler/src/hooks/useApplicationData.js"],"names":["axios","useState","useEffect","useApplicationData","day","days","appointments","id","time","interview","interviewers","state","setState","setDay","updateSpots","filteredDay","filter","name","spots","length","appointment","bookInterview","put","then","response","cancelInterview","delete","Promise","all","get","prev","data"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\n\nexport default function useApplicationData() {\n  //The default state of the application to be used\n  const [state, setState] = useState({\n    day: 'Monday',\n    days: [],\n    appointments: {\n      '1': {\n        id: 1,\n        time: '12pm',\n        interview: null\n      }\n    },\n    interviewers: {}\n  });\n\n  //*********Functions that manipulate the data***************\n  const setDay = day => setState({...state, day});\n\n  //Function to update the current spots on the Day list\n  function updateSpots() {\n    const filteredDay = state.days.filter(day => {\n      return day.name === state.day;\n    })\n    const spots = 0;\n    \n    if (filteredDay.length > 0){\n      for (let appointment of filteredDay['0'].appointments) {\n        appointment = state['appointments'][`${appointment}`];\n\n        \n      }\n    }    \n  }\n\n  updateSpots();\n\n  function bookInterview(id, interview) { \n\n    const appointment = {\n      ...state.appointments[id],\n      interview: { ...interview }\n    };\n\n    const appointments = {\n      ...state.appointments,\n      [id]: appointment\n    };\n\n    //Add the state to the API so that data persists\n    return axios.put(`/api/appointments/${id}`, {interview}).then(response => {\n      setState({...state, appointments});\n    });\n  }\n\n  //Remove an appointment and delete it from the database\n  function cancelInterview(id) {\n\n    const appointment = {\n      ...state.appointments[id],\n      interview: null\n    };\n\n    const appointments = {\n      ...state.appointments,\n      [id]: appointment,\n    };\n\n    return axios.delete(`/api/appointments/${id}`, {}).then(() => {\n      setState({...state, appointments});\n    });\n  }\n\n  //Make API calls to display data from the database\n  useEffect(() => {\n    Promise.all([\n      axios.get('/api/days'),\n      axios.get('/api/appointments'),\n      axios.get('/api/interviewers')\n    ])\n    .then(all => {\n      setState(prev => ({...prev, \n        days: all[0].data, \n        appointments: all[1].data, \n        interviewers: all[2].data\n      }));\n    })\n  }, []);\n\n  return { state, setDay, bookInterview, cancelInterview }\n}\n"]},"metadata":{},"sourceType":"module"}