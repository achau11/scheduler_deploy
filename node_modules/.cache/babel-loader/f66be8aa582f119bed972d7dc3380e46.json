{"ast":null,"code":"import _objectSpread from \"/home/ahmed/lighthouse/scheduler/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/ahmed/lighthouse/scheduler/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nexport default function useApplicationData() {\n  //The default state of the application to be used\n  const _useState = useState({\n    day: 'Monday',\n    days: [],\n    appointments: {\n      '1': {\n        id: 1,\n        time: '12pm',\n        interview: null\n      }\n    },\n    interviewers: {}\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1]; //*********Functions that manipulate the data***************\n\n\n  const setDay = day => setState(_objectSpread({}, state, {\n    day\n  })); //Function to update the current spots on the Day list\n\n\n  function updateSpots(state, appointments) {\n    const dayObj = state.days.find(d => d.name === state.day);\n    let spots = 0;\n\n    for (const id of dayObj.appointments) {\n      const appointment = appointments[id];\n\n      if (!appointment.interview) {\n        spots++;\n      }\n    }\n\n    const newDay = _objectSpread({}, dayObj, {\n      spots\n    });\n\n    const newDays = state.days.map(d => d.name === state.day ? newDay : d);\n    return newDays;\n  }\n\n  function bookInterview(id, interview) {\n    const appointment = _objectSpread({}, state.appointments[id], {\n      interview: _objectSpread({}, interview)\n    });\n\n    const appointments = _objectSpread({}, state.appointments, {\n      [id]: appointment\n    }); //Add the state to the API so that data persists\n\n\n    return axios.put(\"/api/appointments/\".concat(id), {\n      interview\n    }).then(() => {\n      const days = updateSpots(state, appointments);\n      setState(_objectSpread({}, state, {\n        appointments,\n        days\n      }));\n    });\n  } //Remove an appointment and delete it from the database\n\n\n  function cancelInterview(id) {\n    const appointment = _objectSpread({}, state.appointments[id], {\n      interview: null\n    });\n\n    const appointments = _objectSpread({}, state.appointments, {\n      [id]: appointment\n    });\n\n    return axios.delete(\"/api/appointments/\".concat(id), {}).then(() => {\n      const days = updateSpots(state, appointments);\n      setState(_objectSpread({}, state, {\n        appointments,\n        days\n      }));\n    });\n  } //Make API calls to display data from the database\n\n\n  useEffect(() => {\n    Promise.all([axios.get('/api/days'), axios.get('/api/appointments'), axios.get('/api/interviewers')]).then(all => {\n      setState(prev => _objectSpread({}, prev, {\n        days: all[0].data,\n        appointments: all[1].data,\n        interviewers: all[2].data\n      }));\n    });\n  }, []);\n  return {\n    state,\n    setDay,\n    bookInterview,\n    cancelInterview\n  };\n}","map":{"version":3,"sources":["/home/ahmed/lighthouse/scheduler/src/hooks/useApplicationData.js"],"names":["axios","useState","useEffect","useApplicationData","day","days","appointments","id","time","interview","interviewers","state","setState","setDay","updateSpots","dayObj","find","d","name","spots","appointment","newDay","newDays","map","bookInterview","put","then","cancelInterview","delete","Promise","all","get","prev","data"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\n\nexport default function useApplicationData() {\n  //The default state of the application to be used\n  const [state, setState] = useState({\n    day: 'Monday',\n    days: [],\n    appointments: {\n      '1': {\n        id: 1,\n        time: '12pm',\n        interview: null\n      }\n    },\n    interviewers: {}\n  });\n\n  //*********Functions that manipulate the data***************\n  const setDay = day => setState({...state, day});\n\n  //Function to update the current spots on the Day list\n  function updateSpots(state, appointments) {\n    const dayObj = state.days.find(d => d.name === state.day);\n\n    let spots = 0;\n    for (const id of dayObj.appointments){\n      const appointment = appointments[id];\n      if(! appointment.interview){\n        spots++;\n      }\n    }\n\n    const newDay = {...dayObj,spots}\n    const newDays = state.days.map(d => d.name === state.day ? newDay :d)\n    return newDays;\n  }\n\n  function bookInterview(id, interview) { \n\n    const appointment = {\n      ...state.appointments[id],\n      interview: { ...interview }\n    };\n\n    const appointments = {\n      ...state.appointments,\n      [id]: appointment\n    };\n\n    //Add the state to the API so that data persists\n    return axios.put(`/api/appointments/${id}`, {interview})\n      .then(() => {\n        const days = updateSpots(state, appointments);\n        setState({...state, appointments, days});\n      });\n  }\n\n  //Remove an appointment and delete it from the database\n  function cancelInterview(id) {\n\n    const appointment = {\n      ...state.appointments[id],\n      interview: null\n    };\n\n    const appointments = {\n      ...state.appointments,\n      [id]: appointment,\n    };\n\n    return axios.delete(`/api/appointments/${id}`, {})\n      .then(() => {\n        const days = updateSpots(state, appointments);\n        setState({...state, appointments, days});\n      })\n  }\n\n  //Make API calls to display data from the database\n  useEffect(() => {\n    Promise.all([\n      axios.get('/api/days'),\n      axios.get('/api/appointments'),\n      axios.get('/api/interviewers')\n    ])\n    .then(all => {\n      setState(prev => ({...prev, \n        days: all[0].data, \n        appointments: all[1].data, \n        interviewers: all[2].data\n      }));\n    })\n  }, []);\n\n  return { state, setDay, bookInterview, cancelInterview }\n}\n"]},"metadata":{},"sourceType":"module"}